;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gp

(define num-eggs-total 15)
(define num-eggs-from-population 14)
(define num-best-eggs 16)
(define selection-pop-size 256)
(define photo-time-allowed 10)

(define (make-individual fitness ancestral-fitness generation parent drawable egg pos)
  (list fitness ancestral-fitness generation parent drawable egg pos))

(define (individual-fitness i) (list-ref i 0))
;; only for top/ancestor egg viz
(define (individual-id i) (list-ref i 0))
(define (individual-modify-fitness i v) (list-replace i 0 v))
(define (individual-ancestral-fitness i) (list-ref i 1))
(define (individual-generation i) (list-ref i 2))
(define (individual-parent i) (list-ref i 3))
(define (individual-drawable i) (list-ref i 4))
(define (individual-egg i) (list-ref i 5))
(define (individual-pos i) (list-ref i 6))

(define world-w 5000)
(define world-h 500)

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2)))))
        (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2)))))))

(define (generate-image-pos2)
  (list (+ 100 (random (- screen-width 200)))
        (+ 100 (random (- screen-height 200)))))

(define (make-pos game)
  (if (eq? game "flicker")
      (generate-image-pos2)
      (list (random world-w) (random world-h))))

(define (make-population game samples)
  (let ((new-eggs (- num-eggs-total (length samples))))
    (append
     (map
      (lambda (sample)
        (let ((program (egg-mutate (list-ref sample 0) 0.01))
              (ancestral-fitness (list-ref sample 1))
              (generation (list-ref sample 2))
              (id (list-ref sample 3)))
          (make-individual
           0
           ancestral-fitness
           (+ generation 1)
           id
           (egg-drawable program #t)
           program
           (make-pos game))))
      samples)

     (build-list
      new-eggs
      (lambda (i)
        ;; fixme
        (let ((program (make-random-egg egg-complexity)))
          (make-individual
           0 0 0 0 (egg-drawable program #t)
           program
           (make-pos game))))))))

(define (make-egg-grid game samples x-off)
  (index-map
   (lambda (i sample)
     (let ((program (car sample))
           (fitness (cadr sample))
           (id (list-ref sample 2)))
       (let ((x (modulo i 4)) (y (Math.floor (/ i 4))))
         (let ((xx (+ 80 (* x 90)))
               (yy (+ 150 (* y 120))))
           (list
            (make-individual
             id
             0 0 0
             (egg-drawable program #f)
             program
             (list (+ x-off xx) yy))
            (string-append
             (time-to-seconds fitness)
             " : " (list-ref sample 3)
             " : " (list-ref sample 4)))))))
   samples))

(define (make-best-population game samplesa samplesb samplesc)
  (append
   (make-egg-grid game samplesa 0)
   (make-egg-grid game samplesb 400)
   (make-egg-grid game samplesc 800)))

(define (draw-genome-node ctx program centrex centrey posx posy d apa start end n dist)
  (let ((childstart (+ start (* apa n))))
    (let ((childend (+ childstart apa)))
      (let ((tox (+ centrex (* (sin (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist)))
            (toy (+ centrey (* (cos (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist))))
        (set! ctx.strokeStyle "#000")
        (set! ctx.lineWidth 2)
        (ctx.beginPath)
        (ctx.moveTo posx posy)
        (ctx.lineTo tox toy)
        (ctx.stroke)
        (inner-draw-genome ctx program centrex centrey (+ d 1) childstart childend dist)))))

(define (lerp a b t) (+ (* b t) (* a (- 1 t))))

(define (inner-draw-genome ctx program centrex centrey d start end dist)
  (let ((sc (lerp 0.5 0.3 (/ d 6))))
    (let ((posx (+ centrex (* (sin (+ start (* (/ (- end start) 2.0)))) d dist)))
          (posy (+ centrey (* (cos (+ start (* (/ (- end start) 2.0)))) d dist)))
          (size (* sc 128)))
      (set! ctx.strokeStyle "#000")
      (set! ctx.lineWidth 2)
      (ctx.strokeRect (- posx (/ size 2)) (- posy (/ size 2)) size size)
      (if (eq? (program-type program) "terminal")
          (let ((tcanvas (document.createElement "canvas")))
            (set! tcanvas.width size)
            (set! tcanvas.height size)
            (let ((tctx (tcanvas.getContext "2d")))
              (tctx.scale sc sc)
              (draw-terminal tctx program)
              (ctx.drawImage tcanvas (- posx (/ size 2)) (- posy (/ size 2)))))
          (let ((apa (/ (- end start) 2)))

            (draw-genome-node ctx (operator-operand-a program)
                              centrex centrey posx posy d apa start end 0 dist)
            (draw-genome-node ctx (operator-operand-b program)
                              centrex centrey posx posy d apa start end 1 dist)

            (ctx.save)
            (ctx.translate (- posx (/ size 2))
                           (- posy (/ size 2)))
            (ctx.scale sc sc)
            (draw-op ctx program)
            (set! ctx.fillStyle "#000")
            (set! ctx.font "normal 15pt 'Press Start 2P'")
            (fill-centre-text ctx (operator-type program) 64
                              (if (eq? d 0) 200 180))
            (ctx.restore))))))

(define (render-egg-genome ctx egg centrex centrey)
  (let ((canvas (document.createElement "canvas")))
    (set! canvas.width screen-width)
    (set! canvas.height screen-height)
    (let ((ctx (canvas.getContext "2d")))
      (ctx.beginPath)
      (ctx.arc centrex centrey 500 0 (* 2 Math.PI) #f)
      (set! ctx.fillStyle "#278")
      (ctx.fill)
      (inner-draw-genome ctx (individual-egg egg) centrex centrey 0 0 (* 2 3.141) 65)
      (set! ctx.fillStyle "#fff"))
    canvas))

(define (draw-egg-family-tree ctx ancestors)

  (let ((w (/ (- screen-width 400) (length ancestors))))
    (set! ctx.fillStyle "#000")
    (set! ctx.font "normal 15pt 'Press Start 2P'")

    (index-for-each
     (lambda (i anc)
       (let ((x (+ (* i w) 100)))

         (fill-centre-text ctx (+ "" (car (car anc))) x 200)

         (index-for-each
          (lambda (i child)
            (fill-centre-text ctx (+ "" (car child)) x (+ 400 (* i 20))))
          (cadr anc))
         ))
     ancestors))

  (set! ctx.fillStyle "#fff"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (egglab-data time eggs offset land images username replicate player-time)
  (list time eggs offset land images username replicate player-time tooltip player-id))

(define (egglab-data-init land)
  (list 0 () (list 0 0) land () "???" 0 0 "" 0))

(define (egglab-data-init-land d land)
  (egglab-data-modify-images
   (egglab-data-modify-land d land) ()))

(define (egglab-data-start-game d player-id time eggs offset)
  (list time eggs offset
        (list-ref d 3)
        (list-ref d 4)
        (list-ref d 5)
        (random num-replicates)
        0
        (list-ref d 8)
        player-id))

(define (egglab-data-time d) (list-ref d 0))
(define (egglab-data-modify-time d v) (list-replace d 0 v))
(define (egglab-data-eggs d) (list-ref d 1))
(define (egglab-data-modify-eggs d v) (list-replace d 1 v))
(define (egglab-data-offset d) (list-ref d 2))
(define (egglab-data-modify-offset d v) (list-replace d 2 v))
(define (egglab-data-land d) (list-ref d 3))
(define (egglab-data-modify-land d v) (list-replace d 3 v))
(define (egglab-data-images d) (list-ref d 4))
(define (egglab-data-modify-images d v) (list-replace d 4 v))
(define (egglab-data-username d) (list-ref d 5))
(define (egglab-data-modify-username d v) (list-replace d 5 v))
(define (egglab-data-replicate d) (list-ref d 6))
(define (egglab-data-modify-replicate d v) (list-replace d 6 v))
(define (egglab-data-player-time d) (list-ref d 7))
(define (egglab-data-modify-player-time d v) (list-replace d 7 v))
(define (egglab-data-tooltip d) (list-ref d 8))
(define (egglab-data-modify-tooltip d v) (list-replace d 8 v))
(define (egglab-data-player-id d) (list-ref d 9))
(define (egglab-data-modify-player-id d v) (list-replace d 9 v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (nightjar-intro c)
  (let ((icon-x 150)
        (icon-y 520))
    (game-modify-render
     (lambda (ctx)
       (ctx.drawImage (find-image "eggs.jpg") 0 0)
       (set! ctx.font "normal 70pt 'Press Start 2P'")
       (robo-nightjar-says ctx 22 "Search for my artificial eggs and help ecology and evolution research!" 1)
       (set! ctx.font "normal 40pt 'Press Start 2P'")
       (wrap-text ctx "Easter Robot Nightjar says:" 0 160 1000 50)
       (set! ctx.font "normal 15pt 'Press Start 2P'")
       (set! ctx.globalAlpha 0.8)
       (set! ctx.fillStyle "#ffffff")
       (ctx.fillRect 0 (+ icon-y 140) 1500 100)
       (set! ctx.globalAlpha 1))
   (game-modify-buttons
    (list
     (image-button
      ""
      800 430
      "rotate" (find-image "yes.png")
      (lambda (c)
        (nightjar-menu
         (game-modify-over-nothing-hook
          (lambda (c)
            (game-modify-data
             (lambda (d)
               (egglab-data-modify-tooltip d ""))
             c))
          (game-modify-data
           (lambda (d)
             (msg "init egglab data")
             (egglab-data-init "none yet.."))
           c)))))


      (image-button
       "" (+ icon-x 0) (+ icon-y 190) #f (find-image "sensory-ecology.png")
       (lambda (c)
         (set! window.location "http://www.sensoryecology.com/")
         c))

      (image-button
       "" (+ icon-x 130) (+ icon-y 190) #f (find-image "cuckoos.png")
       (lambda (c)
         (set! window.location "http://www2.zoo.cam.ac.uk/africancuckoos/home.html")
         c))

      (image-button
       "" (+ icon-x 290) (+ icon-y 200) #f (find-image "exeter.png")
       (lambda (c)
         (set! window.location "http://www.exeter.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 470) (+ icon-y 190) #f (find-image "cu.png")
       (lambda (c)
         (set! window.location "http://www.zoo.cam.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 690) (+ icon-y 190) #f (find-image "bbsrc.png")
       (lambda (c)
         (set! window.location "http://www.bbsrc.ac.uk/")
         c))

      (image-button
       "" (+ icon-x 900) (+ icon-y 190) #f (find-image "foam.png")
       (lambda (c)
         (set! window.location "http://fo.am")
         c))

     )
    c))))

(define (bg-full-path fn)
  (string-append "/bg/" fn))

(define (async-load-images c path l)
  (for-each
   (lambda (i)
     (let ((fullpath (bg-full-path i)))
       (load-image-mutate
        (lambda (c)
          (game-modify-data
           (lambda (d)
             (egglab-data-modify-images
              d (append (egglab-data-images d) (list fullpath))))
           c))
        fullpath)))
   (shuffle l)))

;; just to get them in the cache
(define (async-load-images-null c path l)
  (for-each
   (lambda (i)
     (let ((fullpath (bg-full-path i)))
       (load-image-mutate
        (lambda (c)
          (msg (+ "loaded " fullpath))
          c)
        fullpath)))
   (shuffle l)))

(define (nightjar-menu c)
  ;; kick off the loading here
  (async-load-images-null c "MV" (append cf_images cp_images))

  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "Main menu" 0 100 1000 1000)
     (set! ctx.font "normal 20pt 'Press Start 2P'")
     (set! ctx.fillStyle "#000")
     (robo-nightjar-bot-right ctx 20 (text-or-tooltip c "Welcome to egglab! We need your help for our camouflage research!")))

   (game-modify-buttons
    (list

     (egglab-button
      "Play the main game" 600 200 (find-image "bigbutton-1.png")
      "Try and find new eggs. Their camouflage changes as more people play."
      (lambda (c)
        (nightjar-choose-location c)))

     (egglab-button
      "Challenge your friends" 600 400 (find-image "bigbutton-2.png")
      "Make an Easter egg hunt for your friends to play."
      (lambda (c)
        (set! window.location "egghunt.html")
        c))

     (egglab-button
      "Find out more" 600 600 (find-image "bigbutton-1.png")
      "Check out our website to learn more about the science of camouflage."
      (lambda (c)
        (set! window.location "http://nightjar.exeter.ac.uk")
        c))

     )
    c)))

;;(robo-nightjar-says-bottom ctx 20 "Choose which species' nest sites you want to try - I have different eggs for each.")

(define (nightjar-choose-location c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "Discover new patterns" 0 100 1000 1000)
     (robo-nightjar-says-bottom
      ctx 20 (text-or-tooltip c "Choose a species eggs you want to find - I have different eggs for each."))
     (set! ctx.font "normal 20pt 'Press Start 2P'")
     (ctx.drawImage (find-image "cf.png") 0 120)
     (ctx.drawImage (find-image "mv.png") 405 120)
     (ctx.drawImage (find-image "cp.png") 830 120)
     (set! ctx.fillStyle "#000")
     )

   (game-modify-buttons
    (list

    (image-button
     "Back" 1150 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-menu c)))

    (image-button
     "Data" 1000 720 "jumpy" (find-image "button.png")
     (lambda (c)
       (nightjar-env c)))

    (egglab-button
     "Mozambique nightjar" 200 500 (find-image "medbutton-1.png")
     "This nightjar likes to lay it's eggs in open areas."
      (lambda (c)
        (async-load-images c "CF" cf_images)
        (nightjar-research
         "flicker"
         (game-modify-data
          (lambda (d) (egglab-data-init-land d "CF"))
          c))))

    (egglab-button
     "Pennant-winged nightjar" 605 500
     (find-image "medbutton-1.png")
     "This nightjar is not fussy and likes to nest anywhere."
     (lambda (c)
       (async-load-images c "MV" (append cf_images cp_images))
       (nightjar-research
        "flicker"
        (game-modify-data
         (lambda (d) (egglab-data-init-land d "MV"))
         c))))

    (egglab-button
     "Fiery-necked nightjar" 1030 500
     (find-image "medbutton-1.png")
     "This nightjar likes nesting in leaf litter."
     (lambda (c)
       (async-load-images c "CP" cp_images)
       (nightjar-research
        "flicker"
        (game-modify-data
         (lambda (d) (egglab-data-init-land d "CP"))
         c)))))

    c)))

(define (nightjar-about c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "About" 0 50 1000 1000)
     (set! ctx.font "normal 15pt 'Press Start 2P'")
     (wrap-text ctx "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." 0 100 1000 40))

   (game-modify-buttons
    (list
    (image-button
     "Back" 1150 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-choose-location c))))
    c)))


(define (nightjar-env c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text
       ctx (string-append "Egg pattern information") 0 100 1000 60)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (robo-nightjar-bot-left ctx 20 (text-or-tooltip c "Here you can get information on how the egg patterns are progressing."))
      (set! ctx.fillStyle "#000")
      )

    (game-modify-buttons
     (list

      (egglab-button
       "High Scores" 600 200 (find-image "bigbutton-1.png")
       "See if you are on the high scores list."
       (lambda (c)
         (server-call-mutate
          "hiscores"
          (list
           (list "count" 20))
          (lambda (c data)
            (nightjar-hiscores (JSON.parse data) c)))
         c))

      (egglab-button
       "Most sucessful eggs" 600 400 (find-image "bigbutton-2.png")
       "See my most successful eggs for each species."
       (lambda (c)
         (server-call-mutate
          "top-eggs"
          (list
           (list "count" num-best-eggs))
          (lambda (c data)
            (let ((data (JSON.parse data)))
              (nightjar-best
               (game-modify-data
                (lambda (d)
                  (egglab-data-start-game
                   d (egglab-data-player-id d) 0
                   (make-best-population
                    c (map
                       (lambda (d)
                         ;; individually parse the egg's code
                         (cons (JSON.parse (car d)) (cdr d)))
                       (list-ref data 0))
                    (map
                     (lambda (d)
                         ;; individually parse the egg's code
                         (cons (JSON.parse (car d)) (cdr d)))
                     (list-ref data 1))
                    (map
                     (lambda (d)
                       ;; individually parse the egg's code
                       (cons (JSON.parse (car d)) (cdr d)))
                     (list-ref data 2)))
                   (list 0 0)))
                c)))))
         (nightjar-generating-best-eggs c)))

      (egglab-button
       "Egg difficulty graph" 600 600 (find-image "bigbutton-1.png")
       "This shows how the eggs are becoming more difficult to spot."
        (lambda (c)
          (server-call-mutate
           "get-stats"
           (list (list "count" 50))
           (lambda (c data)
             (nightjar-fit-graph (JSON.parse data) c)))
          c))


      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-choose-location c))))
     c))))

(define (nightjar-generating-best-eggs c)
  (game-modify-update
   (lambda (t c)
     c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-says ctx 20 "Please wait while I calculate the best eggs for you..."))
    (game-modify-buttons (list) c))))


(define (nightjar-hiscores table c)
  (game-modify-update
   (lambda (t c ) c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-bot-left ctx 20 "These are my quickest clicking players.")
      (set! ctx.fillStyle "#fff")
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx (string-append "High Scores") 120 100 1000 70)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (wrap-text ctx "Mozambique" -180 150 400 70)
      (wrap-text ctx "Pennant-winged" 120 150 400 70)
      (wrap-text ctx "Fiery-necked" 420 150 400 70)

      (index-for-each
       (lambda (i e)
         (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
           (set! ctx.fillStyle "#fff")
           (if (eq? i 0)
               (text-flashy-render ctx txt 370 (+ 200 (* 30 i)) (game-time c))
               (ctx.fillText txt 370 (+ 200 (* 30 i))))))
       (list-ref table 0))

      (index-for-each
       (lambda (i e)
         (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
           (set! ctx.fillStyle "#fff")
           (if (eq? i 0)
               (text-flashy-render ctx txt 650 (+ 200 (* 30 i)) (game-time c))
               (ctx.fillText txt 650 (+ 200 (* 30 i))))))
       (list-ref table 1))

      (index-for-each
       (lambda (i e)
         (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
           (set! ctx.fillStyle "#fff")
           (if (eq? i 0)
               (text-flashy-render ctx txt 950 (+ 200 (* 30 i)) (game-time c))
               (ctx.fillText txt 950 (+ 200 (* 30 i))))))
       (list-ref table 2)))

    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-env c))))
     c))))

(define (min-max l)
  (foldl
   (lambda (i r)
     (let ((i (car i)))
       (list
        (if (< i (car r)) i (car r))
        (if (> i (cadr r)) i (cadr r)))))
   (list 9999999 0)
   l))

(define (draw-fitness-graph ctx table x y w h)
  (set! ctx.strokeStyle "#fff")
  (ctx.strokeRect x y w h)
  (when (not (null? table))
        (let ((x-per-sample (/ w (length table)))
              (mm (min-max table)))
          (ctx.beginPath)
          (ctx.moveTo x (+ y h))
          (set! ctx.lineWidth 3)
          (index-for-each
           (lambda (i s)
             (let ((s (car s)))
               (ctx.lineTo (+ x (* (+ i 1) x-per-sample))
                           (+ y (* h (/ (- s (car mm)) (- (cadr mm) (car mm))))))))
           table)
          (ctx.stroke)
          (set! ctx.lineWidth 1)

          (ctx.save)
          (ctx.translate x (+ y -170 (/ h 2)))
          (ctx.rotate (/ Math.PI 2))
          (ctx.fillText "Average time in seconds" 0 0)
          (ctx.restore)
          (ctx.fillText (time-to-seconds (cadr mm)) x y)
          (ctx.fillText (time-to-seconds (car mm)) x (+ y h))

          (ctx.fillText "Num eggs recorded" (+ x h -100) (+ 20 y (/ w 2)))
          (ctx.fillText "0" x (+ 20 y h))
          (ctx.fillText (* (length table) 10) (+ x w) (+ y h 20))
          )))

(define (nightjar-fit-graph table c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx (string-append "Egg difficulty graph") 0 100 1000 70)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (draw-fitness-graph ctx table 50 250 1000 500))

    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-env c))))
     c))))


(define (nightjar-research game-type c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-says ctx 18 "Click on my eggs when you see them. Small timing differences help me to make better camouflage patterns.")

      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Are you happy for us to use your timing information?" 0 100 1000 70)
      (set! ctx.font "normal 15pt 'Press Start 2P'"))

    (game-modify-buttons
     (list

      (image-button
       "" 835 455 "rotate" (find-image "yes.png")
       (lambda (c)
         (server-call-mutate
          "sample"
          (list
           (list "player-id" (egglab-data-player-id (game-data c)))
           (list "population" (egglab-data-land (game-data c)))
           (list "replicate" (egglab-data-replicate (game-data c)))
           (list "count" num-eggs-from-population)
           (list "top" selection-pop-size))
          (lambda (c data)
            (let ((ret (JSON.parse data)))
              (let ((player-id (cadr (car ret)))
                    (samples (cadr ret)))
                (msg "GENERATING POPULATION")
                (let ((pop (make-population
                            "flicker"
                            (if (eq? null samples)
                                ()
                                (map
                                 (lambda (d)
                                   ;; individually parse the egg's code
                                   (cons (JSON.parse (car d)) (cdr d)))
                                 samples)))))
                  (nightjar-flicker-game
                   (game-modify-data
                    (lambda (d)
                      (let ((time-now (- (js "new Date()") load-time)))
                        (egglab-data-start-game
                         d player-id time-now pop (list 0 0))))
                    c)))))))
         (nightjar-generating-eggs c)))

     (image-button
      "Back" 1150 720 "jumpy" (find-image "button.png")
      (lambda (c) (nightjar-choose-location c)))
     )

     c))))

(define (nightjar-generating-eggs c)
  (game-modify-update
   (lambda (t c)
     c)
   (game-modify-render
    (lambda (ctx)
      (robo-nightjar-says ctx 20 "Please wait while I generate some eggs just for you..."))
    c)))

(define (nightjar-thanks c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Thanks for playing!" 0 200 1000 70)
      (wrap-text ctx (string-append "Your average time was: "
                                    (time-to-seconds (egglab-data-player-time (game-data c)))
                                    " seconds.")
                 0 250 1000 70)
      (set! ctx.font "normal 15pt 'Press Start 2P'"))

    (game-modify-postrender
     (lambda (ctx) 0)
     (game-modify-buttons
      (list
       (image-button
        "Continue" (/ screen-width 2) 500 "jumpy" (find-image "button.png")
        (lambda (c)
          (if (eq? (egglab-data-username (game-data c)) "???")
              (nightjar-enter-name c)
              (begin
                (server-call
                 "add-score"
                 (list
                  (list "player-id" (egglab-data-player-id (game-data c)))
                  (list "name" (egglab-data-username (game-data c)))
                  (list "score" (egglab-data-player-time (game-data c)))
                  (list "population" (egglab-data-land (game-data c)))
                  (list "replicate" (egglab-data-replicate (game-data c)))))
                (nightjar-choose-location c))))))
      c)))))

(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (game-modify-data
   (lambda (d)
     (egglab-data-modify-username d (type-into (egglab-data-username d) ch)))
   c))

(define (type-delete c)
  (game-modify-data
   (lambda (d)
     (egglab-data-modify-username d (type-into-delete (egglab-data-username d))))
   c))

(define (nightjar-enter-name c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "normal 50pt 'Press Start 2P'")
      (wrap-text ctx (egglab-data-username (game-data c)) 0 280 1000 70)
      (set! ctx.font "normal 30pt 'Press Start 2P'"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 105)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (find-image "button.png")
                         (lambda (c) (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (image-button "Delete" 850 700 "jumpy" (find-image "button.png")
                     (lambda (c) (type-delete c)))

       (image-button "Done" 1100 700 "jumpy" (find-image "button.png")
                     (lambda (c)
                       (server-call
                        "add-score"
                        (list
                         (list "player-id" (egglab-data-player-id (game-data c)))
                         (list "name" (egglab-data-username (game-data c)))
                         (list "score" (egglab-data-player-time (game-data c)))
                         (list "population" (egglab-data-land (game-data c)))
                         (list "replicate" (egglab-data-replicate (game-data c)))))
                       (server-call
                        "player"
                        (list
                         (list "player-id" (egglab-data-player-id (game-data c)))
                         (list "name" (egglab-data-username (game-data c)))
                         (list "played-before" "#f")
                         (list "age-range" 2)))
                       (nightjar-choose-location c))))
      )
     c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (find-egg drawable pop)
  (let ((r (filter
            (lambda (egg)
              (eq? drawable (individual-drawable egg)))
            pop)))    (if (null? r) #f (car r))))

(define (time-elapsed c)
  (- (game-time c) (egglab-data-time (game-data c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define speed 0.2)

(define (screen-pos c egg)
  (- screen-width
     (+ (car (individual-pos egg))
        (car (game-world-offset c)))))

(define (fitness c egg)
  (/ (screen-pos c egg) speed))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (reset-images c)
  (game-modify-data
   (lambda (d)
     (let ((land (egglab-data-land (game-data c))))
       (egglab-data-modify-images
        d (map
           (lambda (i)
             (bg-full-path land i))
           (shuffle
            (cond
             ((eq? land "CF") cf_images)
             ((eq? land "CP") cp_images)
             ((eq? land "MV") (append cf_images cp_images))
             (else (msg "oops") cf_images)))))))
   c))

(define (egglab-add-time t d)
  (egglab-data-modify-player-time
   d (+ t (egglab-data-player-time d))))

(define (egglab-finish-time t d)
  (egglab-data-modify-player-time
   d (/ (+ t (egglab-data-player-time d)) num-eggs-total)))

(define (submit-egg egg c)
  (server-call
   "add"
   (list
    (list "population" (egglab-data-land (game-data c)))
    (list "replicate" (egglab-data-replicate (game-data c)))
    (list "player-id" (egglab-data-player-id (game-data c)))
    (list "fitness" (+ (individual-ancestral-fitness egg) (time-elapsed c)))
    (list "individual-fitness" (time-elapsed c))
    (list "generation" (individual-generation egg))
    (list "parent" (individual-parent egg))
    (list "image" (car (egglab-data-images (game-data c))))
    (list "x-pos" (car (individual-pos egg)))
    (list "y-pos" (cadr (individual-pos egg)))
    (list "genotype" (JSON.stringify (individual-egg egg))))))

(define (build-next-egg c)
  (if (eq? (length (egglab-data-eggs (game-data c))) 1)
      (game-modify-data
       (lambda (d)
         (egglab-finish-time (time-elapsed c) d))
       (reset-images (nightjar-thanks c)))
      (game-modify-buttons
       (list
        (flicker-build-egg
         (game-modify-data
          (lambda (d)
            (egglab-add-time
             (time-elapsed c)
             (egglab-data-modify-images
              (egglab-data-modify-offset
               (egglab-data-modify-eggs
                (egglab-data-modify-time
                 d
                 (game-time c))
                (cdr (egglab-data-eggs d)))
               (list 0 0))
              (cdr (egglab-data-images d)))))
          c)))
       c)))

(define (seconds-taken c)
  (/ (time-elapsed c) 1000))

(define (result-text t)
  (cond
   ((< t 1)
    (play-sound (string-append "great-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Super Reflex" "X-Ray vision!" "Perfect predator" "SO FAST"))))
   ((and (> t 1) (< t 2))
    (play-sound (string-append "good-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Nice work" "Not too shabby" "Good"))))
   (else
    (play-sound (string-append "ok-" (+ 1 (random 3)) ".wav"))
    (string-append
     t " Secs - "
     (choose (list "Try harder" "Could do better" "Mouse problem?" "Looking the other way?"))
     ))))

(define (flicker-build-egg c)
  (let ((egg (car (egglab-data-eggs (game-data c)))))
    (let ((pos (individual-pos egg)))
      (image-button
       "" (car pos) (cadr pos) #f
       (individual-drawable egg)
       (lambda (c)
         (submit-egg egg c)
         (let ((t (seconds-taken c)))
           (nightjar-flicker-result
            c t (result-text t)
            (list (random-range -200 200) (random-range 200 800))
            (list (- (rndf) 0.5) (- (rndf) 0.5))
            (+ (game-time c) 500))))))))

(define (nightjar-flicker-game c)
  (game-modify-update
   (lambda (t c)
     (cond
      ((< (seconds-taken c) photo-time-allowed)
       c)
      (else
       ;; don't submit ones not clicked on???
       ;;(submit-egg (car (egglab-data-eggs (game-data c))) c)
       (play-sound (string-append "fail.wav"))
       (build-next-egg c))))
   (game-modify-render
    (lambda (ctx)
      (ctx.drawImage
       (find-image (car (egglab-data-images (game-data c))))
       (- 0 (car (egglab-data-offset (game-data c))))
       (- 0 (cadr (egglab-data-offset (game-data c)))))
      (set! ctx.font "normal 30pt 'Press Start 2P'"))
    (game-modify-postrender
     (lambda (ctx)
       (nightjar-draw-clock ctx (seconds-taken c) photo-time-allowed))
     (game-modify-buttons
      (list
       (flicker-build-egg c))
      c)))))

(define (nightjar-flicker-result c time text pos dir end-time)
  (game-modify-update
   (lambda (t c)
     (if (> t end-time)
         (build-next-egg (nightjar-flicker-game c))
         c))
   (game-modify-render
    (lambda (ctx)
      (ctx.drawImage (find-image (car (egglab-data-images (game-data c))))
                     (- 0 (car (egglab-data-offset (game-data c))))
                     (- 0 (cadr (egglab-data-offset (game-data c)))))
      (nightjar-draw-clock ctx time photo-time-allowed)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (set! ctx.font "normal 30pt 'Press Start 2P'"))
    (game-modify-postrender
     (lambda (ctx) 0)
     (game-modify-buttons
      (list) c)))))

;;      (let ((x (+ (car pos) (* (car dir) 0.1 (- end-time (game-time c)))))
;;            (y (+ (cadr pos) (* (cadr dir) 0.1 (- end-time (game-time c))))))
;;        (set! ctx.fillStyle "#000")
;;        (wrap-text ctx text x y)
;;        (if (< time 1)
;;            (let ((t (game-time c)))
;;              (set! ctx.fillStyle (rgb-to-hex (* 256 (sin (* t 0.005)))
;;                                              (* 256 (sin (* t 0.006)))
;;                                              (* 256 (sin (* t 0.008))))))
;;            (set! ctx.fillStyle "#fff"))
;;      (wrap-text ctx text (- x 5) (- y 5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (nightjar-best c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 20pt 'Press Start 2P'")
      (wrap-text ctx "Mozambique nightjar" -400 50 400 70)
      (wrap-text ctx "Pennant-winged nightjar" 0 50 400 70)
      (wrap-text ctx "Fiery-necked nightjar" 400 50 400 70)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (robo-nightjar-says-bottom
       ctx 20
       "These are my best eggs for each species. Click on an egg to see how it's made.")
      (set! ctx.font "normal 10pt 'Press Start 2P'"))

    (game-modify-buttons
     (append
      (list

       (image-button
        "Back" 1150 720 "jumpy" (find-image "button.png")
        (lambda (c) (nightjar-env c))))

      (map
       (lambda (best-egg)
         (let ((egg (car best-egg))
               (fitness (cadr best-egg)))
           (let ((pos (individual-pos egg)))
             (image-button
              fitness (car pos) (cadr pos) #f
              (individual-drawable egg)
              (lambda (c)
                (nightjar-egg-view
                 c egg
                 (render-egg-genome ctx egg (/ screen-width 2) (/ screen-height 2))))))))
       (egglab-data-eggs (game-data c))))
     c))))

(define (nightjar-egg-view c egg image)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (ctx.drawImage image 0 0)
     (ctx.fillText "Egg pattern construction" 20 50))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 #f (find-image "button.png")
      (lambda (c)
        (nightjar-best c)))
;;   (image-button
;;      "Family Tree" 1150 520 #f (find-image "button.png")
;;      (lambda (c)
;;        (server-call-mutate
;;         "family-tree"
;;         (list (list "id" (individual-id egg))) ;; only works for the viz screens
;;         (lambda (c data)
;;           (msg data)
;;           (nightjar-family-tree c egg (JSON.parse data))))
;;        c))
     )
    c)))

(define (nightjar-family-tree c egg ancestors)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (draw-egg-family-tree ctx ancestors)
     (ctx.fillText "Egg family tree" 20 50))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 #f (find-image "button.png")
      (lambda (c)
        (nightjar-egg-view c egg))))
    c)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(set! ctx.font "normal 50pt 'Press Start 2P'")

(load-sounds!
 (list
  "great-1.wav"
  "great-2.wav"
  "great-3.wav"
  "good-1.wav"
  "good-2.wav"
  "good-3.wav"
  "ok-1.wav"
  "ok-2.wav"
  "ok-3.wav"
  "fail.wav"))

(load-images!
 (append
  (list
   "button.png"
   "bigbutton-1.png"
   "bigbutton-2.png"
   "medbutton-1.png"
   "egg.png"
   "cf.png"
   "cp.png"
   "mv.png"
   "eggs.jpg"
   "bubble.png"
   "bubble2.png"
   "bubble4.png"
   "ren.png"
   "ren-eye1.png"
   "ren-eye2.png"
   "ren-eye3.png"
   "ren-leg1.png"
   "ren-leg2.png"
   "yes.png"
   "no.png"
   "bbsrc.png"
   "cu.png"
   "exeter.png"
   "cuckoos.png"
   "foam.png"
   "sensory-ecology.png"
   )
  egg-images)
 (lambda ()
   (start-game canvas ctx)))

(define cf_images
  (list
"CF/CF005_L_V_2012-c.jpg"
"CF/CF013_L_V_2012-c.jpg"
"CF/CF027_L_V_2013-c.jpg"
"CF/CF002_L_V_2013-c.jpg"
"CF/CF011_L_V_2012-c.jpg"
"CF/CF001_L_V_2013-c.jpg"
"CF/CF005_L_V_2013-c.jpg"
"CF/CF020_L_V_2012-c.jpg"
"CF/CF034_L_V_2012-c.jpg"
"CF/CF031_L_V_2012-c.jpg"
"CF/CF020_L_V_2013-c.jpg"
"CF/CF012_L_V_2012-c.jpg"
"CF/CF001_L_V_2012-c.jpg"
"CF/CF017_L_V_2012-c.jpg"
"CF/CF013_L_V_2013-c.jpg"
"CF/CF011_L_V_2013-c.jpg"
"CF/CF006_L_V_2013-c.jpg"
"CF/CF010_L_V_2013-c.jpg"
"CF/CF016_L_V_2013-c.jpg"
"CF/CF012_L_V_2013-c.jpg"
"CF/CF025_L_V_2012-c.jpg"
"CF/CF026_L_V_2012-c.jpg"
"CF/CF026_L_V_2013-c.jpg"
"CF/CF022_R_V_2012-c.jpg"
"CF/CF008_L_V_2013-c.jpg"
"CF/CF035_L_V_2012-c.jpg"
"CF/CF027_L_V_2012-c.jpg"
"CF/CF028_L_V_2013-c.jpg"
"CF/CF015_L_V_2012-c.jpg"
"CF/CF018_L_V_2013-c.jpg"
"CF/CF002_L_V_2012-c.jpg"))

(define cp-images
  (list
"CP/CP012_L_V_2013-c.jpg"
"CP/CP043_L_V_2013-c.jpg"
"CP/CP029_L_V_2012-c.jpg"
"CP/CP001_L_V_2012-c.jpg"
"CP/CP005_L_V_2013-c.jpg"
"CP/CP021_R_V_2013-c.jpg"
"CP/CP015_R_V_2013-c.jpg"
"CP/CP024_L_V_2013-c.jpg"
"CP/CP007_L_V_2013-c.jpg"
"CP/CP012_L_V_2012-c.jpg"
"CP/CP004_R_V_2013-c.jpg"
"CP/CP020_L_V_2013-c.jpg"
"CP/CP016_L_V_2012-c.jpg"
"CP/CP026_L_V_2012-c.jpg"
"CP/CP001_L_V_2013-c.jpg"
"CP/CP019_R_V_2012-c.jpg"
"CP/CP025_L_V_2013-c.jpg"
"CP/CP017_L_V_2012-c.jpg"
"CP/CP014_L_V_2012-c.jpg"
"CP/CP041_L_V_2013-c.jpg"
"CP/CP013_R_V_2013-c.jpg"
"CP/CP029_L_V_2013-c.jpg"
"CP/CP032_L_V_2012-c.jpg"
"CP/CP018_R_V_2013-c.jpg"
"CP/CP035_L_V_2013-c.jpg"
"CP/CP019_L_V_2013-c.jpg"
"CP/CP008_L_V_2013-c.jpg"
"CP/CP042_L_V_2013-c.jpg"
"CP/CP030_L_V_2013-c.jpg"
"CP/CP010_R_V_2013-c.jpg"
"CP/CP017_L_V_2013-c.jpg"
"CP/CP015_L_V_2012-c.jpg"
"CP/CP010_L_V_2012-c.jpg"
"CP/CP011_R_V_2013-c.jpg"
"CP/CP014_R_V_2013-c.jpg"
"CP/CP028_L_V_2013-c.jpg"
"CP/CP011_L_V_2012-c.jpg"
"CP/CP033_L_V_2013-c.jpg"
"CP/CP023_L_V_2013-c.jpg"
"CP/CP025_R_V_2012-c.jpg"
"CP/CP009_R_V_2013-c.jpg"))
