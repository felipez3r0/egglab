;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gp



(define egg-images
  (build-list 24 (lambda (i) (+ "themes/natural/" (+ i 1) ".png"))))

(define (transform x y r s) (list x y r s))

(define (transform-x t) (list-ref t 0))
(define (transform-y t) (list-ref t 1))
(define (transform-rotate t) (list-ref t 2))
(define (transform-scale t) (list-ref t 3))

(define (transform-mutate t r)
  (transform
   (modulo (+ (transform-x t) (* (rndf) 10 r)) 127)
   (modulo (+ (transform-y t) (* (rndf) 10 r)) 127)
   (choose (list 0 (/ 6.282 4)))
   1))

(define (make-terminal)
  (list
   "terminal"
   (transform (random 127) (random 127) (choose (list 0 (/ 6.282 4))) 1)
   (choose egg-images)))

(define (program-type t) (list-ref t 0))
(define (terminal-transform t) (list-ref t 1))
(define (terminal-image t) (list-ref t 2))

(define (terminal-mutate t r)
  (list
   "terminal"
   (transform-mutate (terminal-transform t) r)
   (if (> r (rndf))
       (choose egg-images)
       (terminal-image t))))

(define blend-modes
  ;; "safe" modes (browser consisitent)
  (list "source-over"
        "source-atop"
        "destination-over"
        "destination-out"
        "lighter"
        "xor"))

(define (make-operator a b)
  (list "op" (choose blend-modes) a b))

(define (operator-type t) (list-ref t 1))
(define (operator-operand-a t) (list-ref t 2))
(define (operator-operand-b t) (list-ref t 3))

(define (operator-mutate t r)
  (list
   "op"
   (if (> r (rndf)) (choose blend-modes) (operator-type t))
   (egg-mutate (operator-operand-a t) r)
   (egg-mutate (operator-operand-b t) r)))

(define (make-random-egg depth)
  (if (or (zero? depth) (< (random 10) 2))
      (make-terminal)
      (make-operator (make-random-egg (- depth 1))
                     (make-random-egg (- depth 1)))))

(define (egg-mutate egg r)
  (if (eq? (program-type egg) "terminal")
      (terminal-mutate egg r)
      (operator-mutate egg r)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-individual fitness drawable egg pos)
  (list fitness drawable egg pos))

(define (individual-fitness i) (list-ref i 0))
(define (individual-modify-fitness i v) (list-replace i 0 v))
(define (individual-drawable i) (list-ref i 1))
(define (individual-egg i) (list-ref i 2))
(define (individual-pos i) (list-ref i 3))

(define world-w 5000)
(define world-h 500)

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2)))))
        (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2)))))))

(define (generate-image-pos2)
  (list (+ 100 (random (- screen-width 200)))
        (+ 100 (random (- screen-height 200)))))

(define (make-pos game)
  (if (eq? game "flicker")
      (generate-image-pos2)
      (list (random world-w) (random world-h))))

(define (make-population game samples)
  (let ((new-eggs (- 20 (length samples))))
    (append
     (map
      (lambda (sample)
        (let ((program (egg-mutate sample 0.01)))
          (make-individual
           0 (egg-drawable program)
           program
           (make-pos game))))
      samples)

     (build-list
      new-eggs
      (lambda (i)
        ;; fixme
        (let ((program (eval-string (scheme-txt (make-random-egg 6)))))
          (make-individual
           0 (egg-drawable program)
           program
           (make-pos game))))))))

(define (make-best-population game samples)
  (index-map
   (lambda (i program)
     (let ((x (modulo i 7)) (y (Math.floor (/ i 7))))
       (let ((xx (+ 100 (* x 160)))
             (yy (+ 300 (* y 150))))
         (make-individual
          0 (egg-drawable program)
          program
          (list xx yy)))))
   samples))

(define (egg-drawable program)
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width 128)
    (set! tcanvas.height 128)
    (let ((tctx (tcanvas.getContext "2d")))
      (draw-egg tctx program)
      (set! tctx.globalCompositeOperation "destination-atop")
      (tctx.drawImage (find-image "egg.png") 0 0)
      tcanvas)))

(define (draw-terminal ctx program)
  (ctx.save)
  (set! ctx.fillStyle
        (ctx.createPattern
         (find-image (terminal-image program) image-lib) "repeat"))

  (ctx.translate 64 64)
  (ctx.rotate (transform-rotate (terminal-transform program)))
  (ctx.translate -64 -64)

  (ctx.translate (transform-x (terminal-transform program))
                 (transform-y (terminal-transform program)))
  ;;        (ctx.scale (transform-scale (terminal-transform program))
  ;;                   (transform-scale (terminal-transform program)))
  (ctx.fillRect (- 0 (transform-x (terminal-transform program)))
                (- 0 (transform-y (terminal-transform program)))
                (* 127 2) (* 127 2))
  ;;        (ctx.scale (/ 1 (transform-scale (terminal-transform program)))
  ;;                   (/ 1 (transform-scale (terminal-transform program))))
  ;;(ctx.translate (- 0 (transform-x (terminal-transform program)))
  ;;               (- 0 (transform-y (terminal-transform program))))
  (ctx.restore))

(define (draw-op ctx program)
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width 128)
    (set! tcanvas.height 128)
    (let ((tctx (tcanvas.getContext "2d")))
      (set! tctx.globalCompositeOperation "source-over")
      (draw-egg tctx (operator-operand-a program))
      (set! tctx.globalCompositeOperation (operator-type program))
      (draw-egg tctx (operator-operand-b program))
      (set! tctx.globalCompositeOperation "source-over")
      (ctx.drawImage tcanvas 0 0))))

(define (draw-egg ctx program)
  (if (eq? (program-type program) "terminal")
      (draw-terminal ctx program)
      (draw-op ctx program)))

(define (sin a) (Math.sin a))
(define (cos a) (Math.cos a))

(define (draw-genome-node ctx program centrex centrey posx posy d apa start end n dist)
  (let ((childstart (+ start (* apa n))))
    (let ((childend (+ childstart apa)))
      (let ((tox (+ centrex (* (sin (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist)))
            (toy (+ centrey (* (cos (+ childstart (* (/ (- childend childstart) 2.0)))) (+ d 1) dist))))
        (set! ctx.strokeStyle "#000")
        (set! ctx.lineWidth 2)
        (ctx.beginPath)
        (ctx.moveTo posx posy)
        (ctx.lineTo tox toy)
        (ctx.stroke)
        (inner-draw-genome ctx program centrex centrey (+ d 1) childstart childend dist)))))

(define (lerp a b t) (+ (* b t) (* a (- 1 t))))

(define (inner-draw-genome ctx program centrex centrey d start end dist)
  (let ((sc (lerp 0.5 0.3 (/ d 6))))
    (let ((posx (+ centrex (* (sin (+ start (* (/ (- end start) 2.0)))) d dist)))
          (posy (+ centrey (* (cos (+ start (* (/ (- end start) 2.0)))) d dist)))
          (size (* sc 128)))
      (set! ctx.strokeStyle "#000")
      (set! ctx.lineWidth 2)
      (ctx.strokeRect (- posx (/ size 2)) (- posy (/ size 2)) size size)
      (if (eq? (program-type program) "terminal")
          (let ((tcanvas (document.createElement "canvas")))
            (set! tcanvas.width size)
            (set! tcanvas.height size)
            (let ((tctx (tcanvas.getContext "2d")))
              (tctx.scale sc sc)
              (draw-terminal tctx program)
              (ctx.drawImage tcanvas (- posx (/ size 2)) (- posy (/ size 2)))))
          (let ((apa (/ (- end start) 2)))

            (draw-genome-node ctx (operator-operand-a program)
                              centrex centrey posx posy d apa start end 0 dist)
            (draw-genome-node ctx (operator-operand-b program)
                              centrex centrey posx posy d apa start end 1 dist)

            (ctx.save)
            (ctx.translate (- posx (/ size 2))
                           (- posy (/ size 2)))
            (ctx.scale sc sc)
            (draw-op ctx program)
            (set! ctx.fillStyle "#000")
            (set! ctx.font "normal 15pt 'Press Start 2P'")
            (fill-centre-text ctx (operator-type program) 64
                              (if (eq? d 0) 200 180))
            (ctx.restore))))))

(define (draw-egg-genome ctx egg centrex centrey)
  (ctx.beginPath)
  (ctx.arc centrex centrey 500 0 (* 2 Math.PI) #f)
  (set! ctx.fillStyle "#278")
  (ctx.fill)
  (inner-draw-genome ctx (individual-egg egg) centrex centrey 0 0 (* 2 3.141) 65)
  (set! ctx.fillStyle "#fff"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (egglab-data time eggs offset land images replicate username)
  (list time eggs offset land images username))

(define (egglab-data-init land)
  (list 0 () (list 0 0) land () "???" (list 0 0)))

(define (egglab-data-start-game d time eggs offset)
  (list time eggs offset (list-ref d 3) (list-ref d 4) (list-ref d 5)))

(define (egglab-data-time d) (list-ref d 0))
(define (egglab-data-modify-time d v) (list-replace d 0 v))
(define (egglab-data-eggs d) (list-ref d 1))
(define (egglab-data-modify-eggs d v) (list-replace d 1 v))
(define (egglab-data-offset d) (list-ref d 2))
(define (egglab-data-modify-offset d v) (list-replace d 2 v))
(define (egglab-data-land d) (list-ref d 3))
(define (egglab-data-modify-land d v) (list-replace d 3 v))
(define (egglab-data-images d) (list-ref d 4))
(define (egglab-data-modify-images d v) (list-replace d 4 v))
(define (egglab-data-replicate d) (list-ref d 4))
(define (egglab-data-modify-replicate v) (list-replace d 4 v))
(define (egglab-data-username d) (list-ref d 4))
(define (egglab-data-modify-username v) (list-replace d 4 v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (nightjar-intro c)
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage (find-image "eggs.jpg") 0 0)
     (set! ctx.font "normal 70pt 'Press Start 2P'")
     (wrap-text ctx "EGGLAB" 0 200 1000 1000)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "Evolve egg patterns for science!" 0 250 1000 50)
     (set! ctx.font "normal 15pt 'Press Start 2P'"))
   (game-modify-buttons
    (list
     (image-button
      "Click to continue!"
      (/ screen-width 2) 700
      "flashy" (find-image "button.png")
      (lambda (c)
        (msg "hello")
        (nightjar-choose-location c))))
    c)))

(define (async-load-images c path l)
  (for-each
   (lambda (i)
     (let ((fullpath (string-append "/bg/" path "/" i)))
       (load-image-mutate
        (lambda (c)
          (game-modify-data
           (lambda (d)
             (msg fullpath)
             (egglab-data-modify-images
              d (shuffle (cons fullpath (egglab-data-images d)))))
           c))
        fullpath)))
   l))

(define (nightjar-choose-location c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "Choose your location" 0 50 1000 1000)
     (set! ctx.font "normal 15pt 'Press Start 2P'")
     (wrap-text ctx "Land of the ..." 0 100 1000 1000))

   (game-modify-buttons
    (list

    (image-button
     "About" 1000 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-about c)))

    (image-button
     "Back" 1150 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-intro c)))


    (image-button
     "Fiery-necked" (+ (/ screen-width 2) 200) 650
     "jumpy" (find-image "cp.png")
     (lambda (c)
       (async-load-images c "CP" cp_images)
       (nightjar-env
        (game-modify-data
         (lambda (d) (egglab-data-init "CP"))
          c))))

    (image-button
     "Pennant-winged"  (- (/ screen-width 2) 400) 650
     "jumpy" (find-image "mv.png")
     (lambda (c)
       (async-load-images c "MV" mv_images)
       (nightjar-env
        (game-modify-data
         (lambda (d) (egglab-data-init "MV"))
         c))))

    (image-button
      "Mozambique" (- (/ screen-width 2) 100) 450
      "jumpy" (find-image "cf.png")
      (lambda (c)
        (async-load-images c "CF" cf_images)
        (nightjar-env
         (game-modify-data
          (lambda (d) (egglab-data-init "CF"))
          c)))))




    c)))

(define (nightjar-about c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (wrap-text ctx "About" 0 50 1000 1000)
     (set! ctx.font "normal 15pt 'Press Start 2P'")
     (wrap-text ctx "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum." 0 100 1000 40))

   (game-modify-buttons
    (list

    (image-button
     "Back" 1150 720 "jumpy" (find-image "button.png")
     (lambda (c) (nightjar-choose-location c))))


    c)))


(define (nightjar-env c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text
       ctx (string-append "Land of the "
                          (cond
                           ((eq? (egglab-data-land (game-data c)) "CF")
                            "Mozambique Nightjar")
                           ((eq? (egglab-data-land (game-data c)) "CP")
                            "Fiery-necked Nightjar")
                           ((eq? (egglab-data-land (game-data c)) "MV")
                            "Pennant-winged Nightjar")
                           (else "oops")))
       0 100 1000 60)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (wrap-text
       ctx "All you need to do is click on the eggs as soon as you see them. We use timing information to guide the artificial evolution of the eggs."
       0 200 1000 30))

    (game-modify-buttons
     (list
      (image-button
       "Play the game" (- (/ screen-width 2) 300) 400 "jumpy" (find-image "button.png")
       (lambda (c)
         (nightjar-research "flicker" c)))

;      (image-button
;       "Scroll game" (/ screen-width 2) 400 "jumpy" (find-image "button.png")
;       (lambda (c)
;         (server-call-mutate
;          "sample"
;          (list (list "image" "img")
;                (list "count" 18)
;                (list "thresh" 95))
;          (lambda (c data)
;            (nightjar-research
;             "scroll"
;             (game-modify-data
;              (lambda (d)
;                (egglab-data-start-game
;                  d (game-time c)
;                  (make-population "scroll" (eval-string data))
;                 (list 0 0)))
;              c))))
;         c))

      (image-button
       "See the best eggs" (+ (/ screen-width 2) 300) 400 "jumpy" (find-image "button.png")
       (lambda (c)
         (server-call-mutate
          "stats"
          (list
           (list "land" (egglab-data-land (game-data c)))
           (list "count" 21))
          (lambda (c data)
            (nightjar-best
             (game-modify-data
              (lambda (d)
                (egglab-data-start-game
                 d 0
                 (make-best-population c (eval-string data))
                 (list 0 0)))
              c))))
         c))

      (image-button
       "Back" 1150 720 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-choose-location c)))


      )
     c))))

(define (nightjar-research game-type c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 15pt 'Press Start 2P'")
      (wrap-text ctx "Ok to donate your game to science?" 0 200 1000 1000))
    (game-modify-buttons
     (list
      (image-button
       "Yes!" (- (/ screen-width 2) 150) 400 "jumpy" (find-image "button.png")
       (lambda (c)
         (server-call-mutate
          "sample"
          (list (list "land" (egglab-data-land (game-data c)))
                (list "count" 18)
                (list "thresh" 95))
          (lambda (c data)
            (cond
             ((eq? game-type "flicker")
              (nightjar-flicker-game
               (game-modify-data
                (lambda (d)
                  (egglab-data-start-game
                   d
                   (game-time c)
                   (make-population "flicker" (eval-string data))
                   (list 0 0)))
                c)))
             (else
              (nightjar-scroll-game
               (game-modify-data
                (lambda (d)
                  (egglab-data-start-game
                   d
                   (game-time c)
                   (make-population "scroll" (eval-string data))
                   (list 0 0)))
                c))))))
         c))


      (image-button
       "No thanks" (+ (/ screen-width 2) 150) 400 "jumpy" (find-image "button.png")
       (lambda (c) (nightjar-intro c))))

     c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (find-egg drawable pop)
  (let ((r (filter
            (lambda (egg)
              (eq? drawable (individual-drawable egg)))
            pop)))
    (if (null? r) #f (car r))))

(define (send-remaining c)
  (for-each
   (lambda (b)
     (let ((egg (find-egg (button-drawable b)
                          (egglab-data-eggs (game-data c)))))
       (when egg
             (server-call
              "add"
              (list
               (list "image" "one")
               (list "genotype" (dbg (scheme-txt (individual-egg egg))))
               (list "fitness" 1500))))))
   (game-buttons c)))

(define (time-elapsed c)
  (- (game-time c) (egglab-data-time (game-data c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define speed 0.2)

(define (screen-pos c egg)
  (- screen-width
     (+ (car (individual-pos egg))
        (car (game-world-offset c)))))

(define (fitness c egg)
  (/ (screen-pos c egg) speed))

(define (nightjar-scroll-game c)
  (console.log "building - game")
  (game-modify-update
   (lambda (t c)
     (let ((t (+ 1500 (* (time-elapsed c) (- 0 speed)))))
       (if (> t -4500)
           (game-modify-world-offset c (list t 0))
           (begin
             ;;(send-remaining c)
             (nightjar-env
              (game-modify-world-offset c (list 0 0)))))))
   (game-modify-render
    (lambda (ctx)
      (ctx.drawImage (find-image "bg/_VC_VC009_Eggs_R_Control_1m_DSC_4534.jpg") 0 0)
      (set! ctx.font "normal 15pt 'Press Start 2P'")

      (ctx.fillText (string-append (length (game-buttons c)) " eggs remaining")
                    (- 100 (car (game-world-offset c)))
                    (- 100 (cadr (game-world-offset c)))))
    (game-modify-buttons
     (map
      (lambda (egg)
        (let ((pos (individual-pos egg)))
          (image-button
           "" (car pos) (cadr pos) #f
           (individual-drawable egg)
           (lambda (c)
             (play-sound "sounds/button.wav")
             (server-call
              "add"
              (list
               (list "image" "")
               (list "game" "scroll")
               (list "genotype" (scheme-txt (individual-egg egg)))
               (list "fitness" (fitness c egg))))

             (game-modify-buttons
              (filter
               (lambda (b)
                 (not (eq? (button-drawable b) (individual-drawable egg))))
               (game-buttons c))
              c)))))
      (egglab-data-eggs (game-data c)))
     c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (flicker-build-egg c)
  (msg "building egg")
  (let ((egg (car (egglab-data-eggs (game-data c)))))
    (let ((pos (individual-pos egg)))
      (image-button
       "" (car pos) (cadr pos) #f
       (individual-drawable egg)
       (lambda (c)
         (play-sound "sounds/button.wav")

         (server-call
          "add"
          (list
           (list "image" (car (egglab-data-images (game-data c))))
           (list "land" (egglab-data-land (game-data c)))
           (list "game" "flicker")
           (list "genotype" (scheme-txt (individual-egg egg)))
           (list "fitness" (time-elapsed c))))

         (if (eq? (length (egglab-data-eggs (game-data c))) 1)
             (begin
               (msg "reset...")
               (nightjar-env c))
             (game-modify-buttons
              (list
               (flicker-build-egg
                (dbg (game-modify-data
                      (lambda (d)
                        (egglab-data-modify-images
                         (egglab-data-modify-offset
                          (egglab-data-modify-eggs
                           (egglab-data-modify-time
                            d
                            (game-time c))
                           (cdr (egglab-data-eggs d)))
                          (list 0 0))
                         (cdr (egglab-data-images d))))
                      c))))
              c)))))))

(define (nightjar-flicker-game c)
  (console.log "building - game")
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage (find-image (car (egglab-data-images (game-data c))))
                    (- 0 (car (egglab-data-offset (game-data c))))
                    (- 0 (cadr (egglab-data-offset (game-data c)))))
     (set! ctx.font "normal 30pt 'Press Start 2P'"))
   (game-modify-buttons
    (list
     (flicker-build-egg c))
    c)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (nightjar-best c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt 'Press Start 2P'")
      (wrap-text ctx "Best eggs" 0 200 1000 1000))
    (game-modify-buttons
     (cons
      (image-button
       "Back" 1150 720 #f (find-image "button.png")
       (lambda (c) (nightjar-env c)))
      (map
       (lambda (egg)
         (let ((pos (individual-pos egg)))
           (image-button
            "" (car pos) (cadr pos) #f
            (individual-drawable egg)
            (lambda (c)
              (nightjar-egg-view c egg)))))

       (egglab-data-eggs (game-data c)))
      )
     c))))

(define (nightjar-egg-view c egg)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.font "normal 30pt 'Press Start 2P'")
     (draw-egg-genome ctx egg (/ screen-width 2) (/ screen-height 2))
     (ctx.fillText "Egg genome" 20 50))
   (game-modify-buttons
    (list
     (image-button
      "Back" 1150 720 #f (find-image "button.png")
      (lambda (c)
        (nightjar-best c))))
    c)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(set! ctx.font "normal 50pt 'Press Start 2P'")

(load-images!
 (append
  (list
   "button.png"
   "egg.png"
   "cf.png"
   "cp.png"
   "mv.png"
   "eggs.jpg")
  egg-images)
 (lambda ()
   (start-game canvas ctx)))


(define cf_images
  (list "_CF_CF001_Eggs_L_Control_2m_DSC_0144.jpg"
        "_CF_CF001_Eggs_R_Control_2m_DSC_0183.jpg"
        "_CF_CF002_Eggs_L_Control_2m_DSC_0367.jpg"
        "_CF_CF002_Eggs_R_Control_2m_DSC_0403.jpg"
        "_CF_CF003_Eggs_L_Control_2m_DSC_0586.jpg"
        "_CF_CF003_Eggs_R_Control_2m_DSC_0622.jpg"
        "_CF_CF004_Eggs_L_Control_2m_DSC_1516.jpg"
        "_CF_CF004_Eggs_R_Control_2m_DSC_1558.jpg"
        "_CF_CF005_Eggs_L_Control_2m_DSC_1307.jpg"
        "_CF_CF005_Eggs_R_Control_2m_DSC_1343.jpg"
        "_CF_CF006_Eggs_L_Control_2m_DSC_0818.jpg"
        "_CF_CF006_Eggs_R_Control_2m_DSC_0854.jpg"
        "_CF_CF009_Eggs_L_Control_2m_DSC_1139.jpg"
        "_CF_CF009_Eggs_R_Control_2m_DSC_1178.jpg"
        "_CF_CF010_Eggs_L_Control_2m_DSC_1603.jpg"
        "_CF_CF010_Eggs_R_Control_2m_DSC_1645.jpg"
        "_CF_CF011_Eggs_L_Control_2m_DSC_1780.jpg"
        "_CF_CF011_Eggs_R_Control_2m_DSC_1822.jpg"
        "_CF_CF012_Eggs_L_Control_2m_DSC_2032.jpg"
        "_CF_CF012_Eggs_R_Control_2m_DSC_2074.jpg"
        "_CF_CF013_Eggs_L_Control_2m_DSC_2206.jpg"
        "_CF_CF013_Eggs_R_Control_2m_DSC_2251.jpg"
        "_CF_CF014_Eggs_L_Control_2m_DSC_2293.jpg"
        "_CF_CF014_Eggs_R_Control_2m_DSC_2335.jpg"
        "_CF_CF015_Eggs_L_Control_2m_DSC_2812.jpg"
        "_CF_CF015_Eggs_R_Control_2m_DSC_2854.jpg"
        "_CF_CF017_Eggs_L_Control_2m_DSC_3796.jpg"
        "_CF_CF017_Eggs_R_Control_2m_DSC_3841.jpg"
        "_CF_CF020_Eggs_L_Control_2m_DSC_5035.jpg"
        "_CF_CF020_Eggs_R_Control_2m_DSC_5083.jpg"
        "_CF_CF021_Eggs_L_Control_2m_DSC_4936.jpg"
        "_CF_CF021_Eggs_R_Control_2m_DSC_4987.jpg"
        "_CF_CF022_Eggs_L_Control_2m_DSC_5443.jpg"
        "_CF_CF022_Eggs_R_Control_2m_DSC_5491.jpg"
        "_CF_CF024_Eggs_L_Control_2m_DSC_5884.jpg"
        "_CF_CF024_Eggs_R_Control_2m_DSC_5932.jpg"
        "_CF_CF025_Eggs_L_Control_2m_DSC_6082.jpg"
        "_CF_CF025_Eggs_R_Control_2m_DSC_6130.jpg"
        "_CF_CF026_Eggs_L_Control_2m_DSC_5983.jpg"
        "_CF_CF026_Eggs_R_Control_2m_DSC_6031.jpg"
        "_CF_CF027_Eggs_L_Control_2m_DSC_6574.jpg"
        "_CF_CF027_Eggs_R_Control_2m_DSC_6622.jpg"
        "_CF_CF028_Eggs_L_Control_2m_DSC_6469.jpg"
        "_CF_CF028_Eggs_R_Control_2m_DSC_6520.jpg"
        "_CF_CF029_Eggs_L_Control_2m_DSC_6769.jpg"
        "_CF_CF029_Eggs_R_Control_2m_DSC_6817.jpg"
        "_CF_CF031_Eggs_L_Control_2m_DSC_7789.jpg"
        "_CF_CF031_Eggs_R_Control_2m_DSC_7837.jpg"
        "_CF_CF032_Eggs_L_Control_2m_DSC_8413.jpg"
        "_CF_CF032_Eggs_R_Control_2m_DSC_8461.jpg"
        "_CF_CF034_Eggs_L_Control_2m_DSC_8512.jpg"
        "_CF_CF034_Eggs_R_Control_2m_DSC_8569.jpg"
        "_CF_CF035_Eggs_L_Control_2m_DSC_8812.jpg"
        "_CF_CF035_Eggs_R_Control_2m_DSC_8860.jpg"
        "_CF_CF036_Eggs_L_Control_2m_DSC_8716.jpg"
        "_CF_CF036_Eggs_R_Control_2m_DSC_8764.jpg"))

(define cp_images
  (list "_CP_CP001_Eggs_L_Control_2m_DSC_0906.jpg"
        "_CP_CP001_Eggs_R_Control_2m_DSC_0093.jpg"
        "_CP_CP002_Eggs_L_Control_2m_with_GS_DSC_0540.jpg"
        "_CP_CP002_Eggs_R_Control_2m_with_GS_DSC_0573.jpg"
        "_CP_CP010_Eggs_L_Control_2m_DSC_0662.jpg"
        "_CP_CP010_Eggs_R_Control_2m_DSC_0701.jpg"
        "_CP_CP011_Eggs_L_Control_2m_DSC_1232.jpg"
        "_CP_CP011_Eggs_R_Control_2m_DSC_1271.jpg"
        "_CP_CP012_Eggs_L_Control_2m_DSC_1690.jpg"
        "_CP_CP012_Eggs_R_Control_2m_DSC_1738.jpg"
        "_CP_CP014_Eggs_L_Control_2m_DSC_2464.jpg"
        "_CP_CP014_Eggs_R_Control_2m_DSC_2506.jpg"
        "_CP_CP015_Eggs_L_Control_2m_DSC_2638.jpg"
        "_CP_CP015_Eggs_R_Control_2m_DSC_2680.jpg"
        "_CP_CP016_Eggs_L_Control_2m_DSC_2986.jpg"
        "_CP_CP016_Eggs_R_Control_2m_DSC_3034.jpg"
        "_CP_CP017_Eggs_L_Control_2m_DSC_3889.jpg"
        "_CP_CP017_Eggs_R_Control_2m_DSC_3931.jpg"
        "_CP_CP018_Eggs_L_Control_2m_DSC_4840.jpg"
        "_CP_CP018_Eggs_R_Control_2m_DSC_4888.jpg"
        "_CP_CP019_Eggs_L_Control_2m_DSC_5119.jpg"
        "_CP_CP019_Eggs_R_Control_2m_DSC_5158.jpg"
        "_CP_CP024_Eggs_L_Control_2m_DSC_6373.jpg"
        "_CP_CP024_Eggs_R_Control_2m_DSC_6421.jpg"
        "_CP_CP025_Eggs_L_Control_2m_DSC_6670.jpg"
        "_CP_CP025_Eggs_R_Control_2m_DSC_6721.jpg"
        "_CP_CP026_Eggs_L_Control_2m_DSC_6964.jpg"
        "_CP_CP026_Eggs_R_Control_2m_DSC_7012.jpg"
        "_CP_CP027_Eggs_L_Control_2m_DSC_7081.jpg"
        "_CP_CP027_Eggs_R_Control_2m_DSC_7132.jpg"
        "_CP_CP029_Eggs_L_Control_2m_DSC_7300.jpg"
        "_CP_CP029_Eggs_R_Control_2m_DSC_7348.jpg"
        "_CP_CP031_Eggs_L_Control_2m_DSC_8317.jpg"
        "_CP_CP031_Eggs_R_Control_2m_DSC_8365.jpg"
        "_CP_CP032_Eggs_L_Control_2m_DSC_8218.jpg"
        "_CP_CP032_Eggs_R_Control_2m_DSC_8266.jpg"))

(define mv_images
  (list
   "_MV_MV001_Eggs_L_Control_2m_DSC_3973.jpg"
   "_MV_MV001_Eggs_R_Control_2m_DSC_4021.jpg"
   "_MV_MV002_Eggs_L_Control_2m_DSC_6178.jpg"
   "_MV_MV002_Eggs_R_Control_2m_DSC_6226.jpg"
   "_MV_MV003_Eggs_L_Control_2m_DSC_7399.jpg"
   "_MV_MV003_Eggs_R_Control_2m_DSC_7447.jpg"
   "_MV_MV004_Eggs_L_Control_2m_DSC_7597.jpg"
   "_MV_MV004_Eggs_R_Control_2m_DSC_7645.jpg"
   "_MV_MV005_Eggs_L_Control_2m_DSC_7693.jpg"
   "_MV_MV005_Eggs_R_Control_2m_DSC_7741.jpg"
   "_MV_MV006_Eggs_L_Control_2m_DSC_8041.jpg"
   "_MV_MV006_Eggs_R_Control_2m_DSC_8092.jpg"
   "_MV_MV007_Eggs_L_Control_2m_DSC_8908.jpg"
   "_MV_MV007_Eggs_R_Control_2m_DSC_8956.jpg"))
